{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","aboutText","onClick","toggleMode","role","HTMLfor","defaultProps","TextForm","useState","text","setText","heading","rows","value","onChange","event","target","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","style","height","alert","word","lower","charAt","slice","capitalise","msg","App","setalert","message","setTimeout","setMode","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d2ab0c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/About\">{props.aboutText}</Link> */}\r\n                <a className=\"nav-link\" to=\"/About\">{props.aboutText}</a>\r\n              </li>\r\n              </ul>\r\n             \r\n    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" HTMLfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: ' set title here',\r\n    aboutText: 'set about text here'\r\n};","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n       // console.log('Uppercase Was Clicked' + text);\r\n        \r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase :)\",\"success\");\r\n    }\r\n    const handleLowClick = () =>{\r\n        // console.log('Uppercase Was Clicked' + text);\r\n         \r\n         let newText= text.toLowerCase();\r\n         setText(newText)\r\n         props.showAlert(\"Converted to LowerCase :)\",\"success\");\r\n     }\r\n     const handleClearClick = () =>{\r\n        // console.log('Uppercase Was Clicked' + text);\r\n         \r\n         let newText=' ';\r\n         setText(newText)\r\n         props.showAlert(\"Text Cleared :)\",\"success\");\r\n     }\r\n    const handleOnChange = (event) =>{\r\n        //console.log('On Change');\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = ()=>{\r\n        \r\n        navigator.clipboard.writeText(text);\r\n      \r\n        props.showAlert(\"Copied to Clipboard :)\",\"success\");\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed :)\",\"success\");\r\n    }\r\n    const [text, setText ] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n \r\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\r\n</div>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleCopy}>Copy Text</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-2\">\r\n            <h3>Your Text Summary</h3>\r\n            <p><b>{ text.split(/\\s/).filter((element)=>{return element.length!==0}).length } words and {text.length} characters</b></p>\r\n            <p><b>{0.008 * text.split(\" \").length} Minutes Read </b></p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text:'Nothing To Preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\n function Alert(props) {\r\n    const capitalise = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n           { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg} \r\n \r\n</div>}\r\n</div>\r\n      \r\n    )\r\n}\r\n    export default Alert","import Navbar from './components/Navbar';\nimport './App.css';\nimport TextForm from './components/TextForm';\n//  import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setalert] = useState(null);\n  const showAlert =  (message,type)=>{\n       setalert({\n          msg:message,\n          type:type\n       })\n\n       setTimeout(() => {\n        setalert(null);\n      }, 1500);\n  }\n  const [mode,setMode] = useState('light');\n  {/*const removeBodyClasses = ()=>{\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-primary');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-warning');\n  }*/}\n const toggleMode = ()=>{\n // removeBodyClasses();\n //  document.body.classList.add('bg-'+cls);\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n  //    document.title = \"Text-converter-DarkMode\";\n  }\n    else {\n  setMode('light');\n  document.body.style.backgroundColor='white';\n  showAlert(\"Light Mode has been enabled\",\"success\");\n // document.title = \"Text-converter-LightMode\";\n\n  \n}  \n}\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"Textutils\" aboutText=\"About Textutils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert = {alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n         </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} mode={mode} heading=\"Enter the text here to analyze\"/>\n          {/* </Route>\n        </Switch>\n        \n        </Router> */}\n    \n    </div>\n    \n</>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}