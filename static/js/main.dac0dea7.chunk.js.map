{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","role","HTMLfor","defaultProps","TextForm","useState","text","setText","heading","rows","value","onChange","event","target","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","color","backgroundColor","style","Alert","height","alert","word","lower","charAt","slice","capitalise","msg","App","setalert","message","setTimeout","setMode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dac0dea7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">{props.aboutText}</Link>\r\n              </li>\r\n              </ul>\r\n             \r\n    <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" HTMLfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: ' set title here',\r\n    aboutText: 'set about text here'\r\n};","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () =>{\r\n       // console.log('Uppercase Was Clicked' + text);\r\n        \r\n        let newText= text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase :)\",\"success\");\r\n    }\r\n    const handleLowClick = () =>{\r\n        // console.log('Uppercase Was Clicked' + text);\r\n         \r\n         let newText= text.toLowerCase();\r\n         setText(newText)\r\n         props.showAlert(\"Converted to LowerCase :)\",\"success\");\r\n     }\r\n     const handleClearClick = () =>{\r\n        // console.log('Uppercase Was Clicked' + text);\r\n         \r\n         let newText=' ';\r\n         setText(newText)\r\n         props.showAlert(\"Text Cleared :)\",\"success\");\r\n     }\r\n    const handleOnChange = (event) =>{\r\n        //console.log('On Change');\r\n        setText(event.target.value)\r\n    }\r\n    const handleCopy = ()=>{\r\n        \r\n        navigator.clipboard.writeText(text);\r\n      \r\n        props.showAlert(\"Copied to Clipboard :)\",\"success\");\r\n    }\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Spaces Removed :)\",\"success\");\r\n    }\r\n    const [text, setText ] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n \r\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\r\n</div>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleLowClick}>Convert To Lowercase</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleCopy}>Copy Text</button>\r\n<button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-2\">\r\n            <h3>Your Text Summary</h3>\r\n            <p><b>{ text.split(/\\s/).filter((element)=>{return element.length!==0}).length } words and {text.length} characters</b></p>\r\n            <p><b>{0.008 * text.split(\" \").length} Minutes Read </b></p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text:'Nothing To Preview'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n  const myStyle = {\r\n    color:props.mode==='dark'?'black':'black',\r\n    backgroundColor:props.mode==='dark'?'grey':'white',\r\n    \r\n  }\r\n\r\n  {/*}\r\n    const [myStyle , setMyStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n\r\n    })\r\n\r\n const[btntext,setBtnText]=useState('Enable Light Mode')\r\n   const toggleStyle = ()=>{\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border:'2px solid white'\r\n            })\r\n            setBtnText('Enable Dark Mode')\r\n        }\r\n            else{\r\n                setMyStyle({\r\n                    color: 'white',\r\n                    backgroundColor: 'black',\r\n                    border:'2px solid black'\r\n                })\r\n                setBtnText('Enable Light Mode');\r\n            }\r\n        }\r\n      */}\r\n    \r\n    return (\r\n        \r\n        <div className=\"conatainer\" >\r\n            <h1 className=\"my-2\" style={{color:props.mode==='dark'?'black':'black'}}>About Us</h1>\r\n        <div>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        BRIEF ABOUT THE WEBSITE\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        This website converts the given text to lowercase or uppercase accordingly . You can also enable LIGHT or DARK mode XD.....\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        FUNCTIONS THAT ARE PERFORMED BY THE WEBSITE\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n       The website also shows the preview of the user entered text, time taken to read the text and also counts the number of words and characters entered by the user \r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n{/*<div className=\"container my-3\">\r\n<button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\">{btntext}</button>\r\n</div>*/}\r\n</div>\r\n</div>\r\n\r\n    \r\n    )    \r\n}","import React from 'react'\r\n\r\n function Alert(props) {\r\n    const capitalise = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n           { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalise(props.alert.type)}</strong>: {props.alert.msg} \r\n \r\n</div>}\r\n</div>\r\n      \r\n    )\r\n}\r\n    export default Alert","import Navbar from './components/Navbar';\nimport './App.css';\nimport TextForm from './components/TextForm';\n import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [alert, setalert] = useState(null);\n  const showAlert =  (message,type)=>{\n       setalert({\n          msg:message,\n          type:type\n       })\n\n       setTimeout(() => {\n        setalert(null);\n      }, 1500);\n  }\n  const [mode,setMode] = useState('light');\n  {/*const removeBodyClasses = ()=>{\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-primary');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-warning');\n  }*/}\n const toggleMode = ()=>{\n // removeBodyClasses();\n //  document.body.classList.add('bg-'+cls);\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"Dark Mode has been enabled\",\"success\");\n  //    document.title = \"Text-converter-DarkMode\";\n  }\n    else {\n  setMode('light');\n  document.body.style.backgroundColor='white';\n  showAlert(\"Light Mode has been enabled\",\"success\");\n // document.title = \"Text-converter-LightMode\";\n\n  \n}  \n}\n  return (\n    <>\n    <Router>\n    <Navbar title=\"Textutils\" aboutText=\"About Textutils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert = {alert}/>\n    <div className=\"container my-3\">\n    <Switch>\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n         </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} mode={mode} heading=\"Enter the text here to analyze\"/>\n          </Route>\n        </Switch>\n        </div>\n        </Router>\n    \n    \n    \n</>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}